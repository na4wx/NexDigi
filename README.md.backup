# NexDigi ‚Äî Modern Multi-Channel Packet Radio Toolkit

**The Modern All-in-One Packet Radio Suite**

NexDigi is a complete, production-ready platform for amateur packet radio operations. Whether you're running a digipeater, mesh network node, BBS, or Winlink gateway‚ÄîNexDigi does it all with a beautiful web interface and powerful automation.

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Node.js Version](https://img.shields.io/badge/node-%3E%3D18-brightgreen)](https://nodejs.org/)

---

## ‚ú® Why NexDigi?

**üöÄ Quick Setup** ‚Äî One command installs everything. Server, UI, and system service configured automatically.

**üéØ Feature Complete** ‚Äî APRS digipeater, mesh networking, BBS, Winlink gateway, weather alerts, and real-time chat‚Äîall in one package.

**üé® Modern Interface** ‚Äî Beautiful Material-UI web dashboard. No more ugly terminal interfaces or config file hell.

**üîå Hardware Flexible** ‚Äî Works with serial TNCs, KISS-TCP (Direwolf/SoundModem), AGW, or no hardware at all (testing mode).

**üåê Multi-Protocol** ‚Äî Handles APRS, AX.25, NexNet mesh, APRS-IS, Winlink CMS, and more‚Äîall simultaneously.

**üõ°Ô∏è Production Ready** ‚Äî Automatic reconnection, error recovery, systemd service, and comprehensive logging built-in.

---

## üéØ Core Features

### üì° Multi-Channel Radio Management

- **Multi-Transport Support**
  - Serial KISS (TNC via USB/Serial)
  - KISS-TCP (Direwolf, SoundModem)
  - AGW Protocol (Soundmodem, AGWPE)
  - Mock adapter (testing without hardware)

- **Channel Operations**
  - Multi-channel simultaneous operation
  - Per-channel configuration & routing
  - Cross-band digipeating
  - Duplex-style independent RX/TX
  - Hot-reload configuration
  - Channel health monitoring

### ÔøΩ APRS Digipeater

- **Path Processing**
  - WIDEn-N decrementing with H-bit marking
  - WIDE1-1 fill-in digipeater mode
  - Configurable max WIDE-N per channel
  - Loop prevention & duplicate detection
  - Smart seen-cache with TTL

- **Traffic Management**
  - Cross-channel routing
  - Rate limiting & metrics
  - Blocked frame detection
  - Performance monitoring

### üï∏Ô∏è NexNet Mesh Networking

- **Network Topology**
  - Mesh mode (peer-to-peer)
  - Hub mode (client aggregation)
  - Client mode (connect to hub)
  - Hybrid RF + Internet transport

- **Intelligent Routing**
  - Dynamic route discovery
  - Multi-hop forwarding
  - Path cost calculation
  - Route preference (Internet/RF)

- **Quality of Service (QoS)**
  - 4-level priority queuing
    - Emergency (TOR/SVR/FFW)
    - High (bulletins/weather)
    - Normal (standard traffic)
    - Low (routine messages)
  - Token bucket bandwidth limiting
  - Automatic traffic shaping
  - Queue size configuration

- **Load Balancing**
  - Weighted route selection
  - Round-robin distribution
  - Least-loaded algorithm
  - Automatic failover (threshold-based)
  - Route health tracking

- **Mesh Self-Healing**
  - Link State Advertisements (LSA)
  - Dijkstra shortest path
  - Automatic route discovery
  - Link failure detection
  - Topology synchronization

- **Security & Authentication**
  - Ed25519 public key cryptography
  - Challenge-response authentication
  - Per-node trust relationships
  - Replay attack prevention
  - Rate limiting (auth attempts)
  - Session timeout management

- **BBS Synchronization**
  - Message replication across nodes
  - Vector clock conflict resolution
  - Incremental sync (since timestamp)
  - Deduplication by message hash
  - Bidirectional propagation
  - Selective sync by bulletin number

- **Weather & APRS Distribution**
  - NWS bulletin parsing & flooding
  - APRS position tracking
  - Geographic queries
  - Duplicate detection (5s window)
  - Rate limiting (60 packets/min)

### üìÆ Bulletin Board System (BBS)

- **Message Management**
  - Personal & bulletin messages
  - Message threading & replies
  - Read/unread tracking
  - Message expiration
  - User management

- **Access Methods**
  - APRS messaging (UI frames)
  - Connected mode (AX.25)
  - Multi-channel access
  - Session management

- **Message Alerts**
  - Automatic notification beacons
  - Configurable reminder intervals
  - Per-user alert tracking
  - Message count summaries

### üìß Winlink Gateway

- **CMS Integration**
  - Winlink CMS connection
  - Message pickup & delivery
  - Position reporting
  - Channel status updates

- **Operations**
  - Automatic reconnection
  - Configurable check intervals
  - Multi-channel access
  - Queue management

### ‚òÅÔ∏è Weather Integration

- **NWS Alerts**
  - Real-time NWS API polling
  - SAME code filtering
  - Automatic bulletin generation
  - Active alert persistence
  - Multi-alert handling

- **Weather Digipeating**
  - ALLWX bulletin formatting
  - External bulletin repeating (optional)
  - Product code parsing (TOR/SVR/FFW/WSW)
  - Priority emergency alerts

### üåê APRS-IS IGate

- **Connectivity**
  - Bidirectional APRS-IS connection
  - TLS/SSL support
  - Automatic reconnection
  - Filter configuration

- **Forwarding**
  - RF ‚Üí APRS-IS with position validation
  - APRS-IS ‚Üí RF with rate limiting
  - Per-channel IGate control
  - Message routing

### üí¨ Real-Time Chat

- **Features**
  - Multi-room keyboard-to-keyboard chat
  - RF and internet connectivity
  - Persistent message history
  - WebSocket real-time updates
  - Configurable RF channel routing

### üéõÔ∏è Web Dashboard

- **Monitoring**
  - Live frame viewer with hex/text decode
  - Channel status and health monitoring
  - Real-time traffic metrics
  - Last heard station tracking
  - NexNet topology visualization

- **Configuration**
  - Interactive web-based setup (no config files!)
  - Hot-reload changes without restart
  - Multi-server management
  - Password-protected UI access

---

## üöÄ Quick Installation

Choose your installation method based on your needs:

### Option 1: Full Install (Server + Web UI) ‚Äî Recommended

This installs both the NexDigi server and web interface as a system service.

**Linux (Debian/Ubuntu):**
```bash
git clone https://github.com/na4wx/NexDigi.git
cd NexDigi
chmod +x scripts/install.sh
sudo ./scripts/install.sh
```

**Windows (PowerShell as Administrator):**
```powershell
git clone https://github.com/na4wx/NexDigi.git
cd NexDigi
.\scripts\install.ps1
```

After installation, access the UI at `http://localhost:3000`. Default password is `changeme` ‚Äî **change this immediately** in `config.json`!

### Option 2: Server Only (Headless)

Perfect for remote sites or when you'll access the UI from another machine.

**Linux:**
```bash
git clone https://github.com/na4wx/NexDigi.git
cd NexDigi
chmod +x scripts/install-server.sh
sudo ./scripts/install-server.sh
```

**Windows:**
```powershell
git clone https://github.com/na4wx/NexDigi.git
cd NexDigi
.\scripts\install-server.ps1
```

Server API will be available at `http://localhost:3000`. Connect from a remote UI installation.

### Option 3: Web UI Only (Connect to Remote Server)

Install just the web interface to connect to a remote NexDigi server.

**Linux:**
```bash
git clone https://github.com/na4wx/NexDigi.git
cd NexDigi
chmod +x scripts/install-client.sh
sudo ./scripts/install-client.sh
```

**Windows:**
```powershell
git clone https://github.com/na4wx/NexDigi.git
cd NexDigi
.\scripts\install-client.ps1
```

After installation, open `http://localhost` and configure the remote server connection in the setup dialog.

### Option 4: Development Mode

For development or testing without installing as a service.

```bash
git clone https://github.com/na4wx/NexDigi.git
cd NexDigi
npm install
cd client && npm install && cd ..
npm run dev
```

Access at `http://localhost:5173` (client) and `http://localhost:3000` (server API).

---

## ‚öôÔ∏è Initial Configuration

After installation, access the web UI:

**Local:** `http://localhost:3000`  
**Remote:** `http://your-server-ip:3000`

### First-Time Setup

1. **Welcome Dialog** ‚Äî You'll be prompted to enter:
   - Server host (e.g., `localhost:3000` or `your-server-ip:3000`)
   - UI password (default: `changeme` - set in `server/config.json`)
   - Your callsign

2. **Configure Hardware** ‚Äî Go to Settings ‚Üí Channels
   - Add Serial TNCs, KISS-TCP connections, or Mock adapters
   - Configure port settings and channel IDs

3. **Enable Features** ‚Äî Settings ‚Üí Features
   - Turn on APRS Digipeater, IGate, BBS, Weather Alerts, or NexNet
   - Configure callsigns and station information

4. **Set Up Digipeater** ‚Äî Settings ‚Üí Digipeater
   - Configure WIDE1-1 and WIDEn-N settings
   - Set hop limits and duplicate detection

5. **Optional: Configure NexNet** ‚Äî Settings ‚Üí NexNet
   - Choose mesh mode (mesh/hub/client)
   - Add peer nodes
   - Configure security keys

### Default Configuration

The default `server/config.json` includes:

- **UI Password:** `changeme` (‚ö†Ô∏è **Change this immediately!**)
- **Server Port:** 3000
- **Mock Channel:** Enabled for testing without hardware

---

## üìö Documentation

- **[Installation Guide](docs/INSTALL.md)** ‚Äî Detailed setup for all platforms
- **[Configuration Guide](docs/CONFIGURATION.md)** ‚Äî Channel setup, IGate, BBS, NexNet
- **[NexNet Mesh Guide](docs/NEXNET.md)** ‚Äî Mesh networking, security, and routing
- **[Chat System](CHAT_SYSTEM_SUMMARY.md)** ‚Äî Real-time chat features and setup
- **[API Reference](docs/API.md)** ‚Äî REST API and WebSocket protocols
- **[Troubleshooting](docs/TROUBLESHOOTING.md)** ‚Äî Common issues and solutions

---

## üîß System Requirements

### Minimum

- **CPU:** Single core, 1 GHz
- **RAM:** 512 MB
- **Storage:** 500 MB
- **OS:** Linux (Debian/Ubuntu), Windows 10+, macOS 10.15+
- **Node.js:** 18+ (auto-installed by setup scripts)

### Recommended for Multi-Channel/Mesh

- **CPU:** Dual core, 2+ GHz```bash

- **RAM:** 2 GBnpm install

- **Storage:** 2 GB (for logs and message history)cd client && npm install && cd ..

- **Network:** 10 Mbps+ for NexNet internet linksnpm run dev

```

### Hardware Support

- **Serial TNCs:** Any KISS TNC via USB or serial portServer runs on port 3000, client on Vite default 5173.

- **KISS-TCP:** Direwolf, SoundModem, other KISS servers

- **AGW Protocol:** SoundModem, AGWPE## Installation

- **Mock Mode:** No hardware required for testing

NexDigi supports automated installation on Debian/Ubuntu Linux and Windows. The installers handle system dependencies, Node.js installation, and service setup automatically.

---

### Debian / Ubuntu (Recommended)

## üõ†Ô∏è Service Management

**Automated install** (installs all dependencies and sets up service):

### Linux (systemd)

```bash

```bashgit clone https://github.com/na4wx/NexDigi.git

# Start/stop servicecd NexDigi

sudo systemctl start nexdigisudo bash deploy/install-debian.sh

sudo systemctl stop nexdigi```



# Enable/disable autostartThis installer will:

sudo systemctl enable nexdigi- Install system packages (build tools, Node.js via NodeSource if needed)

sudo systemctl disable nexdigi- Create a `nexdigi` system user with serial port access

- Back up any existing installation to `/opt/nexdigi.bak.TIMESTAMP`

# View logs- Install NexDigi to `/opt/nexdigi` with production dependencies

journalctl -u nexdigi -f- Set up and start the systemd service



# Restart after config changes**Skip system provisioning** (if you already have Node.js and build tools):

sudo systemctl restart nexdigi

```bash

# Check statussudo bash deploy/install-debian.sh --no-provision

systemctl status nexdigi```

```

**Check logs and status:**

### Windows

```bash

```powershell# View logs

# Start/stop servicejournalctl -u nexdigi -f

Start-Service NexDigi

Stop-Service NexDigi# Check service status

systemctl status nexdigi

# Restart```

Restart-Service NexDigi

### Windows

# View status

Get-Service NexDigi**Automated service install:**



# View logs (Event Viewer or log file)```powershell

Get-Content "C:\NexDigi\logs\nexdigi.log" -Tail 50 -Wait# Clone repository first

```git clone https://github.com/na4wx/NexDigi.git

cd NexDigi

---

# Install Node.js dependencies

## üîê Securitynpm install

cd client && npm install && cd ..

### UI Authentication

NexDigi requires password authentication for web UI access. Set your password in `server/config.json`:# Install as Windows service (run in elevated PowerShell)

powershell -ExecutionPolicy Bypass -File .\deploy\install-windows-service.ps1

```json```

{

  "uiPassword": "your-secure-password-here"**Development mode:**

}

``````powershell

# Run server and client in development

**Important Notes:**npm run dev

- RF traffic (APRS, AX.25) does NOT require the UI password```

- NexNet mesh communications use separate cryptographic authentication

- APRS-IS and Winlink connections use their own credentials### Configuration

- The UI password only protects web interface access and configuration changes

1. **Hardware setup**: Edit `server/config.json` to configure your radio channels:

### NexNet Security   - `serial`: For TNCs connected via serial/USB

NexNet uses Ed25519 public key cryptography for node authentication:   - `kiss-tcp`: For SoundModem or networked KISS servers  

   - `mock`: For testing without hardware

1. Each node generates a keypair on first start

2. Nodes exchange public keys via web UI or config file2. **Environment variables**: On Linux, create `/etc/default/nexdigi`:

3. Challenge-response authentication prevents spoofing   ```bash

4. Replay protection with timestamp validation   sudo tee /etc/default/nexdigi > /dev/null <<'EOF'

5. Rate limiting prevents brute force attacks   NODE_ENV=production

   PORT=3000

See [NexNet Security Guide](docs/NEXNET.md#security) for details.   EOF

   ```

---

### Uninstall

## ü§ù Contributing

**Linux:**

Contributions are welcome! Please:```bash

sudo bash deploy/uninstall-debian.sh

1. Fork the repository```

2. Create a feature branch (`git checkout -b feature/amazing-feature`)

3. Commit your changes (`git commit -m 'Add amazing feature'`)**Windows:** Use Windows Services manager or NSSM to remove the service.

4. Push to the branch (`git push origin feature/amazing-feature`)

5. Open a Pull Request## Development Setup



### Development SetupFor development (without service installation):



```bash**Linux/macOS:**

# Install dependencies```bash

npm installgit clone https://github.com/na4wx/NexDigi.git

cd client && npm install && cd ..cd NexDigi

npm install

# Run in development mode (hot reload)cd client && npm install && cd ..

npm run devnpm run dev

```

# Run tests (if available)

npm test**Windows:**

```powershell

# Build for productiongit clone https://github.com/na4wx/NexDigi.git

npm run buildcd NexDigi

cd client && npm run buildnpm install

```cd client; npm install; cd ..

npm run dev

---```



## üìù Changelog### Testing without hardware



See [CHANGELOG.md](CHANGELOG.md) for version history and release notes.Add a `mock` channel in `server/config.json` to test without radio hardware. The mock adapter generates synthetic frames for testing digipeater and weather alert functionality.



---## License



## üêõ TroubleshootingMIT ¬© 2025 Jordan G Webb, NA4WX. See `LICENSE` for details.



### Common Issues## Digipeater configuration notes



**Can't connect to server:**A few runtime tunables are exposed in the Digipeater Settings UI and persisted to `server/data/digipeaterSettings.json`.

- Check that the server is running: `systemctl status nexdigi` (Linux) or `Get-Service NexDigi` (Windows)

- Verify the port is open: `netstat -an | grep 3000` (Linux) or `netstat -an | findstr 3000` (Windows)- seenCache

- Check firewall settings   - `ttl` (milliseconds): how long seen frames are remembered. Default: 5000 (5s). Lower values reduce duplicate suppression latency; higher values reduce re-digipeat risks but use more memory.

   - `maxEntries` (integer): maximum number of entries kept in memory. Default: 1000. Increase this if you handle many simultaneous active stations or low frame rates.

**401 Unauthorized errors:**

- Verify your UI password matches `server/config.json`- metricsThresholds

- Clear browser localStorage and re-add the server   - `servicedWideBlocked` (integer): per-check threshold for how many attempts were blocked because another service already handled the same WIDE entry. Default: 10.

- Check server logs for authentication errors   - `maxWideBlocked` (integer): per-check threshold for how many attempts were blocked due to per-channel max-WIDE constraints. Default: 10.

   - `metricsCheckIntervalSec` (integer): how often the server compares metrics against thresholds (seconds). Default: 60.

**Serial port access denied (Linux):**

```bashOperational guidance

# Add user to dialout group- If you see repeated digipeating of the same WIDE frames, increase `seenCache.ttl` slightly (e.g., to 7500 or 10000 ms) and/or increase `maxEntries` to avoid cache eviction of active entries.

sudo usermod -a -G dialout nexdigi- If metrics alerts trigger often, consider lowering thresholds for earlier notification or tune channel `maxWideN` per-channel to limit propagation.

sudo systemctl restart nexdigi- Defaults are conservative for small-to-medium networks. Adjust gradually while monitoring metrics in the UI.

```



**WebSocket disconnects immediately:**
- Check that the UI password is correctly configured in the client
- Verify the WebSocket URL includes the password parameter
- Check browser console for detailed error messages

For more help, see [docs/TROUBLESHOOTING.md](docs/TROUBLESHOOTING.md)

---

## üìÑ License

MIT License ¬© 2025 Jordan G Webb, NA4WX

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

---

## üôè Acknowledgments

- **APRS Specification:** Bob Bruninga, WB4APR
- **AX.25 Protocol:** Amateur Radio community
- **Winlink Development Team:** For CMS documentation
- **Open Source Community:** Node.js, React, Material-UI, and countless libraries

---

## üìû Support & Contact

- **Issues:** [GitHub Issues](https://github.com/na4wx/NexDigi/issues)
- **Discussions:** [GitHub Discussions](https://github.com/na4wx/NexDigi/discussions)
- **Email:** [na4wx@na4wx.com](mailto:na4wx@na4wx.com)
- **Website:** [https://na4wx.com](https://na4wx.com)

**73 de NA4WX!** üì°
